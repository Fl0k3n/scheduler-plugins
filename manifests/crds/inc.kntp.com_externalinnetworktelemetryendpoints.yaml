---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: externalinnetworktelemetryendpoints.inc.kntp.com
spec:
  group: inc.kntp.com
  names:
    kind: ExternalInNetworkTelemetryEndpoints
    listKind: ExternalInNetworkTelemetryEndpointsList
    plural: externalinnetworktelemetryendpoints
    singular: externalinnetworktelemetryendpoints
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: ExternalInNetworkTelemetryEndpoints is the Schema for the externalinnetworktelemetryendpoints
          API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: ExternalInNetworkTelemetryEndpointsSpec defines the desired
              state of ExternalInNetworkTelemetryEndpoints
            properties:
              collectorNodeName:
                type: string
              entries:
                description: 'INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
                  Important: Run "make" to regenerate code after modifying this file'
                items:
                  properties:
                    entryStatus:
                      type: string
                    nodeName:
                      type: string
                    podReference:
                      description: "ObjectReference contains enough information to
                        let you inspect or modify the referred object. --- New uses
                        of this type are discouraged because of difficulty describing
                        its usage when embedded in APIs. 1. Ignored fields.  It includes
                        many fields which are not generally honored.  For instance,
                        ResourceVersion and FieldPath are both very rarely valid in
                        actual usage. 2. Invalid usage help.  It is impossible to
                        add specific help for individual usage.  In most embedded
                        usages, there are particular restrictions like, \"must refer
                        only to types A and B\" or \"UID not honored\" or \"name must
                        be restricted\". Those cannot be well described when embedded.
                        3. Inconsistent validation.  Because the usages are different,
                        the validation rules are different by usage, which makes it
                        hard for users to predict what will happen. 4. The fields
                        are both imprecise and overly precise.  Kind is not a precise
                        mapping to a URL. This can produce ambiguity during interpretation
                        and require a REST mapping.  In most cases, the dependency
                        is on the group,resource tuple and the version of the actual
                        struct is irrelevant. 5. We cannot easily change it.  Because
                        this type is embedded in many locations, updates to this type
                        will affect numerous schemas.  Don't make new APIs embed an
                        underspecified API type they do not control. \n Instead of
                        using this type, create a locally provided and used type that
                        is well-focused on your reference. For example, ServiceReferences
                        for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533
                        ."
                      properties:
                        apiVersion:
                          description: API version of the referent.
                          type: string
                        fieldPath:
                          description: 'If referring to a piece of an object instead
                            of an entire object, this string should contain a valid
                            JSON/Go field access statement, such as desiredState.manifest.containers[2].
                            For example, if the object reference is to a container
                            within a pod, this would take on a value like: "spec.containers{name}"
                            (where "name" refers to the name of the container that
                            triggered the event) or if no container name is specified
                            "spec.containers[2]" (container with index 2 in this pod).
                            This syntax is chosen only to have some well-defined way
                            of referencing a part of an object. TODO: this design
                            is not final and this field is subject to change in the
                            future.'
                          type: string
                        kind:
                          description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                          type: string
                        name:
                          description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                          type: string
                        namespace:
                          description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                          type: string
                        resourceVersion:
                          description: 'Specific resourceVersion to which this reference
                            is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                          type: string
                        uid:
                          description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                          type: string
                      type: object
                      x-kubernetes-map-type: atomic
                  required:
                  - entryStatus
                  - nodeName
                  - podReference
                  type: object
                type: array
              ingressInfo:
                properties:
                  nodeNames:
                    description: these fields should be included in a dynamic subtype
                      based on IngressType, but since we probably won't support anything
                      except simple NodePort let's keep it this way
                    items:
                      type: string
                    type: array
                  serviceName:
                    type: string
                  serviceNamespace:
                    type: string
                  type:
                    type: string
                required:
                - nodeNames
                - serviceName
                - serviceNamespace
                - type
                type: object
              monitoringPolicy:
                type: string
              programName:
                type: string
            required:
            - collectorNodeName
            - entries
            - ingressInfo
            - monitoringPolicy
            - programName
            type: object
          status:
            description: ExternalInNetworkTelemetryEndpointsStatus defines the observed
              state of ExternalInNetworkTelemetryEndpoints
            properties:
              externalIngressInfo:
                description: 'INSERT ADDITIONAL STATUS FIELD - define observed state
                  of cluster Important: Run "make" to regenerate code after modifying
                  this file'
                properties:
                  nodeNames:
                    description: these fields should be included in a dynamic subtype
                      based on IngressType, but since we probably won't support anything
                      except simple NodePort let's keep it this way
                    items:
                      type: string
                    type: array
                  serviceName:
                    type: string
                  serviceNamespace:
                    type: string
                  type:
                    type: string
                required:
                - nodeNames
                - serviceName
                - serviceNamespace
                - type
                type: object
              externalMonitoringPolicy:
                type: string
              internalIngressInfo:
                properties:
                  nodeNames:
                    description: these fields should be included in a dynamic subtype
                      based on IngressType, but since we probably won't support anything
                      except simple NodePort let's keep it this way
                    items:
                      type: string
                    type: array
                  serviceName:
                    type: string
                  serviceNamespace:
                    type: string
                  type:
                    type: string
                required:
                - nodeNames
                - serviceName
                - serviceNamespace
                - type
                type: object
              internalMonitoringPolicy:
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
